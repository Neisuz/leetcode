// https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/description/

Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.

Return true if it is possible. Otherwise, return false.

Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].

Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].

Example 3:
Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.

// solution
class Solution {
    public boolean isPossibleDivide(int[] nums, int k) {
        if (nums.length % k != 0) {
            return false;
        }
        TreeMap<Integer, Integer> numsTree = new TreeMap<>();
        for (int num : nums) {
            if (!numsTree.containsKey(num)) {
                numsTree.put(num, 1);
            } else {
                numsTree.replace(num, numsTree.get(num) + 1);
            }
        }
        while (numsTree.size() > 0) {
             int number = numsTree.firstKey();
            for (int i = number; i < number + k; i++) {
                if (!numsTree.containsKey(i)) {
                    return false;
                } 
                int count = numsTree.get(i);
                if (count == 1) {
                    numsTree.remove(i);
                } else {
                    numsTree.replace(i, count - 1);
                }
            }
        }
        return true;
    }
}
