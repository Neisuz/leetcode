// https://leetcode.com/problems/majority-element/description/?envType=study-plan-v2&envId=top-interview-150

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

// solution

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> counts = new HashMap<>(); 
        for (int element : nums) {
            if (!counts.containsKey(element)) {
                counts.put(element, 1);
            } else {
                counts.replace(element, counts.get(element) + 1);
            }
        }
        int count = 0;
        int numberOne = 0;
        for (Integer number : counts.keySet()) {
            if (counts.get(number) > count) {
                count = counts.get(number);
                numberOne = number;
            }
        }
        return numberOne;
    }
}
 
